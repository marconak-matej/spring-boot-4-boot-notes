syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.github.mm.grpc.proto";
option java_outer_classname = "DemoProto";

package demo;

// Service for managing Demo entities via gRPC.
// Provides full CRUD operations (Create, Read, Update, Delete).
service DemoService {
  // Creates a new demo entity.
  // Returns the created demo with a generated UUID.
  rpc CreateDemo(CreateDemoRequest) returns (DemoResponse) {}

  // Updates an existing demo entity by ID.
  // Returns NOT_FOUND if the demo doesn't exist.
  rpc UpdateDemo(UpdateDemoRequest) returns (DemoResponse) {}

  // Retrieves a demo entity by its unique ID.
  // Returns NOT_FOUND if the demo doesn't exist.
  rpc GetDemo(GetDemoRequest) returns (DemoResponse) {}

  // Lists all demo entities in the system.
  // Currently returns all demos without pagination.
  rpc ListDemos(ListDemosRequest) returns (ListDemosResponse) {}

  // Deletes a demo entity by ID.
  // Returns NOT_FOUND if the demo doesn't exist.
  rpc DeleteDemo(DeleteDemoRequest) returns (DeleteDemoResponse) {}
}

// Represents a Demo entity in the system.
message Demo {
  // Unique identifier in UUID format (generated by the server).
  // Example: "550e8400-e29b-41d4-a716-446655440000"
  string id = 1;

  // Display name of the demo.
  // Must not be blank and cannot exceed 50 characters.
  string name = 2;
}

// Request message for creating a new demo.
message CreateDemoRequest {
  // Name for the new demo.
  // Required, must not be blank, max 50 characters.
  string name = 1;
}

// Request message for updating an existing demo.
message UpdateDemoRequest {
  // ID of the demo to update.
  // Required, must be a valid UUID.
  string id = 1;

  // New name for the demo.
  // Required, must not be blank, max 50 characters.
  string name = 2;
}

// Request message for retrieving a demo by ID.
message GetDemoRequest {
  // ID of the demo to retrieve.
  // Required, must be a valid UUID.
  string id = 1;
}

// Request message for listing all demos.
// Currently empty - pagination support can be added in the future.
message ListDemosRequest {
  // Empty for now, can add pagination later.
  // Future: int32 page_size, string page_token
}

// Request message for deleting a demo.
message DeleteDemoRequest {
  // ID of the demo to delete.
  // Required, must be a valid UUID.
  string id = 1;
}

// Response message containing a single demo entity.
// Used by CreateDemo, UpdateDemo, and GetDemo operations.
message DemoResponse {
  // The demo entity (created, updated, or retrieved).
  Demo demo = 1;
}

// Response message containing multiple demo entities.
// Used by ListDemos operation.
message ListDemosResponse {
  // List of all demo entities in the system.
  repeated Demo demos = 1;
}

// Response message for delete operations.
message DeleteDemoResponse {
  // Indicates whether the deletion was successful.
  // Always true if the operation completes without error.
  bool success = 1;
}

